= Asciidoctor Demo
////
Big ol' comment

sittin' right 'tween this here title 'n header metadata
////
Dan Allen <thedoc@asciidoctor.org>
:description: A demo of Asciidoctor. This document \
              exercises numerous features of AsciiDoc \
              to test Asciidoctor compliance.
:library: Asciidoctor
:idprefix:
:numbered:
:imagesdir: images
:experimental:
//:toc: macro
:toc: preamble
:toc-title: pass:[<h3>Contents</h3>]
:css-signature: demo
//:max-width: 800px
//:doctype: book
//:sectids!:
ifdef::env-github[]
:note-caption: :information_source:
:tip-caption: :bulb:
endif::[]

This Wiki is a mix of tutorial and references for Sketches. 

toc::[]

== Hello World

Lets start with the following Hello World app. All apps in Sketches have 3 regions. An upper bar, where the name of the app is displayed, the amount of EEPROM and RAM memory available, and also the time.

image::hw.png[]

=== startScreen(void)

The code is quite simple:

[source,c]
----
#include "AquaOS.h"

namespace hello_world {
    void startScreen() { <1>
        drawCenteredString("Hello World!");
        toolbarAddHome(); <2>
    }
}
----
<1> All Sketches apps are written using callbacks, that is, functions that are called when certain functionality has to be performed. The function that is called when a app goes to the 
foreground is `startScreen`. 
<2> This function adds a *home* button in the toolbar, when pressed, the application is no longer on the foreground, and the desktop is shown.

TIP: Apps are always active, not only when they are in the foreground. They get called every second to perform it business logic, but only one app can be on the foreground at a given time. In other words, only one app receives the UI events.

== A Counter

This small applications counts how many times the toolbar button "+" is being pressed.

image::counter.png[]

[source,c]
----
#include "AquaOS.h"

namespace hello_world {
    void startScreen(); <1>
    int counter=0;      <2>
    void count(int param) { <3>
        counter++;
        goToScreen(startScreen); <4>
    }
    void startScreen() { <5>
        print("Counting:");
        print(counter);
        toolbarAdd("+", count, 0); <6>
        toolbarAddHome();
    }
}
----
<1> We need the function prototype to help C++ compile.
<2> The variable we count the number of presses.
<3> Any function with this signature `void function(int param)` is called a *command* in Sketches. 
<4> A command can ask a screen to be drawn, using the `goToScreen(screen)` function. In this case, the screen that shows how many presses have been there, is also `startScreen`. 
<5> `startScreen` is called when the app goes to foreground *and* when the count function is invoked.
<6> Here a button with the label "+" is added. If pressed, the function `count` will be called with the parameter `0`. This parameter has no importance.

=== Commands

Commands are called when a button is pressed in the toolbar. The *param* parameter is not always used, but must be in the signature. Commands can change the screen to another one. For example, a command `configure(int param)` could show a new screen with the calibration info and a toolbar adapted to calibration actions.

== Persistent Variables

In *A Counter* the variable counter will be reset to 0 everytime the microcontroller is powered off. There is a mechanism in Sketches that will keep the value of a variable in the EEPROM. This is very handy in apps that have a configuration, if this configuration would be deleted every time the microcontroller is disconnected, then it would be a lot of work to reconfigure it every time.

[TIP]
.Info
=====
Persistent variables should not be changed frequently. Plan to change a persistent variable less than 10.000 times during the app *life*. There is no problem reading the value of the variable as many times as you want!

